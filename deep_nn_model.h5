# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1asJN3LUd7RjHSlsV_n1kU1myC76gQoXL
"""



import numpy as np
from tensorflow import keras
from tensorflow.keras import layers

# Generate a simple binary classification dataset
# We are creating a custom dataset where:
# - X contains 1000 samples, each with 10 random numerical features
# - y is the binary label: 1 if the sum of the features > 5, otherwise 0
# This is a simple but valid approach for training and evaluating a deep neural network
np.random.seed(42)
X = np.random.rand(1000, 10)
y = (np.sum(X, axis=1) > 5).astype(int)  # Label 1 if sum of features > 5, else 0

# Split the dataset into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the deep neural network model
model = keras.Sequential([
    layers.Dense(10, activation='relu', input_shape=(10,)),
    layers.Dense(8, activation='relu'),
    layers.Dense(8, activation='relu'),
    layers.Dense(4, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

# Save the model
model.save('deep_nn_model.h5')