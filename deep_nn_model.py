# -*- coding: utf-8 -*-
"""lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tvnB4H0zhU61c9eKUDsbSyLujSLMcRd3
"""

# Import necessary libraries
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification
import matplotlib.pyplot as plt

# Task 2: Develop a training set
# Generate synthetic binary classification data
X, y = make_classification(
    n_samples=1000,  # 1000 samples
    n_features=20,   # 20 features per sample
    n_informative=15, # 15 informative features
    n_redundant=2,   # 2 redundant features
    n_classes=2,     # Binary classification
    random_state=42  # For reproducibility
)

# Split into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Task 1: Develop the Multilayer Neural Network
model = keras.Sequential([
    # Layer 1: 10 neurons with ReLU activation
    layers.Dense(10, activation='relu', input_shape=(20,)),

    # Layers 2 & 3: Two layers with 8 neurons and ReLU activation
    layers.Dense(8, activation='relu'),
    layers.Dense(8, activation='relu'),

    # Layer 4: 4 neurons with ReLU activation
    layers.Dense(4, activation='relu'),

    # Output layer: 1 neuron with sigmoid activation for binary classification
    layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)

# Display model summary
model.summary()

# Train the model
history = model.fit(
    X_train, y_train,
    validation_data=(X_val, y_val),
    epochs=50,
    batch_size=32,
    verbose=1
)

# Plot training history
plt.figure(figsize=(12, 4))

# Plot accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()

# Evaluate the model on validation set
loss, accuracy = model.evaluate(X_val, y_val, verbose=0)
print(f"\nValidation Accuracy: {accuracy:.4f}")
print(f"Validation Loss: {loss:.4f}")